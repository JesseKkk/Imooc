<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goods">
    <!--开启二级缓存
        eviction 是缓存的清除策略，当缓存对象数量达到上限后，自动触发对应算法对缓存对象清除
            1. LRU - 最近最少使用的：移除最长时间不被使用的对象
            2. FIFO - 先进先出：按对象进入缓存的顺序来移除他们
            3. SOFT - 软引用：移除基于垃圾回收器状态和软引用规则的对象
            4. WEAK - 弱引用：更积极地移除基于垃圾回收器状态和弱引用规则的对象

        flushInterval 代表间隔多长时间自动清空缓存，单位毫秒，600000毫秒 = 10分钟
        size 缓存存储上限，用于保存对象或集合（1个集合是一个对象）的数量上限
        readOnly 设置为true，代表返回只读缓存，每次从缓存取出的是缓存对象本省，这种执行效率较高
                 设置为false, 代表每次取出的是缓存对象的"副本"，每次取出的对象是不同的，这种安全性较高

    -->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true"/>
    <!--useCache="false"代表不使用缓存-->
    <select id="selectAll" resultType="com.jesse.mybatis.entity.Goods" useCache="false">
        SELECT * FROM t_goods ORDER BY goods_id DESC LIMIT 10
    </select>

    <select id="selectById" parameterType="Integer" resultType="com.jesse.mybatis.entity.Goods">
        SELECT * FROM t_goods WHERE goods_id = #{value}
    </select>

    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.jesse.mybatis.entity.Goods">
        SELECT * FROM t_goods
        WHERE
            current_price BETWEEN #{min} AND #{max}
        ORDER BY current_price
        LIMIT 0,#{lmt}
    </select>

    <!--优点：易于扩展，易于使用
        缺点：太过灵活，无法进行编译时检查
    -->
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        SELECT g.*, c.category_name FROM t_goods AS g, t_category AS c
        WHERE g.category_id = c.category_id
    </select>

    <resultMap id="rmGoods" type="com.jesse.mybatis.dto.GoodsDTO">
        <!--设置主键字段与属性映射-->
        <id property="goods.goodsId" column="goods_id"></id>
        <!--设置非主键字段与属性映射-->
        <result property="goods.title" column="title"></result>
        <result property="goods.subTitle" column="sub_title"></result>
        <result property="goods.originalCost" column="original_cost"></result>
        <result property="goods.currentPrice" column="current_price"></result>
        <result property="goods.discount" column="discount"></result>
        <result property="goods.isFreeDelivery" column="is_free_delivery"></result>
        <result property="goods.categoryId" column="category_id"></result>
        <result property="category.categoryId" column="category_id"></result>
        <result property="category.categoryName" column="category_name"></result>
        <result property="category.parentId" column="parent_id"></result>
        <result property="category.categoryLevel" column="category_level"></result>
        <result property="category.categoryOrder" column="category_order"></result>
    </resultMap>
    <select id="selectGoodsDTO" resultMap="rmGoods">
        SELECT g.*, c.* FROM t_goods AS g, t_category AS c
        WHERE g.category_id = c.category_id
    </select>

    <!--flushCache="true"在sql执行后强制清空缓存-->
    <insert id="insert"
            parameterType="com.jesse.mybatis.entity.Goods"
            useGeneratedKeys="true"
            keyProperty="goodsId"
            keyColumn="goods_id"
            flushCache="true"
    >
        INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        VALUES (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId});
        <!--<selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">
            SELECT  last_insert_id()
        </selectKey>-->
    </insert>

    <update id="update" parameterType="com.jesse.mybatis.entity.Goods">
        UPDATE t_goods
        SET
            title = #{title},
            sub_title = #{subTitle},
            original_cost = #{originalCost},
            current_price = #{currentPrice},
            discount = #{discount},
            is_free_delivery = #{isFreeDelivery},
            category_id = #{categoryId}
        WHERE
            goods_id = #{goodsId}
    </update>

    <delete id="delete" parameterType="Integer">
        DELETE FROM t_goods WHERE goods_id = #{value}
    </delete>

    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.jesse.mybatis.entity.Goods">
        SELECT * FROM t_goods
        <where>
            <if test="categoryId != null">
                and category_id = #{categoryId}
            </if>
            <if test="currentPrice != null">
                and current_price &lt; #{currentPrice}
            </if>
        </where>
    </select>

    <!--
        resultMap可用于说明一对多或者多对一的映射逻辑
        id 是resultMap属性引用的标志
        type 指向One的实体（Goods）
        -->
    <resultMap id="rmGoods1" type="com.jesse.mybatis.entity.Goods">
        <!--映射goods对象的主键到goods_id字段-->
        <id column="goods_id" property="goodsId"></id>
        <!--
            collection的含义是，在
            SELECT * FROM t_goods LIMIT 0,1 得到结果后，对所有Goods对象遍历得到goods_id字段
            并代入到goodsDetail命名空间的selectByGoodsId的SQL中执行查询，
            将得到的"商品详情"集合赋值给goodsDetails List对象。
            -->
        <collection column="goods_id" property="goodsDetails"
                    select="goodsDetail.selectByGoodsId"/>
    </resultMap>
    <select id="selectOneToMany" resultMap="rmGoods1">
        SELECT * FROM t_goods LIMIT 0,1
    </select>
    
    <select id="selectPage" resultType="com.jesse.mybatis.entity.Goods">
        SELECT * FROM t_goods WHERE current_price &lt; 1000
    </select>

   <!--
       INSERT INTO table
       VALUES ("a", "a1", "a2"),("b", "b1", "b2"),(....)
       -->
    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.title}, #{item.subTitle}, #{item.originalCost}, #{item.currentPrice}, #{item.discount}, #{item.isFreeDelivery}, #{item.categoryId})
        </foreach>
    </insert>

    <delete id="batchDelete" parameterType="java.util.List">
        DELETE FROM t_goods WHERE goods_id in
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

</mapper>